// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package groq

import (
	"context"
	"net/http"
	"reflect"

	"github.com/conneroisu/groq-go/internal/apijson"
	"github.com/conneroisu/groq-go/internal/param"
	"github.com/conneroisu/groq-go/internal/requestconfig"
	"github.com/conneroisu/groq-go/option"
	"github.com/conneroisu/groq-go/shared"
	"github.com/tidwall/gjson"
)

// EmbeddingService contains methods and other services that help with interacting
// with the groq API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewEmbeddingService] method instead.
type EmbeddingService struct {
	Options []option.RequestOption
}

// NewEmbeddingService generates a new service that applies the given options to
// each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewEmbeddingService(opts ...option.RequestOption) (r *EmbeddingService) {
	r = &EmbeddingService{}
	r.Options = opts
	return
}

// Creates an embedding vector representing the input text.
func (r *EmbeddingService) New(ctx context.Context, body EmbeddingNewParams, opts ...option.RequestOption) (res *EmbeddingNewResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "openai/v1/embeddings"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

type EmbeddingNewResponse struct {
	// The list of embeddings generated by the model.
	Data []EmbeddingNewResponseData `json:"data,required"`
	// The name of the model used to generate the embedding.
	Model string `json:"model,required"`
	// The object type, which is always "list".
	Object EmbeddingNewResponseObject `json:"object,required"`
	// The usage information for the request.
	Usage EmbeddingNewResponseUsage `json:"usage,required"`
	JSON  embeddingNewResponseJSON  `json:"-"`
}

// embeddingNewResponseJSON contains the JSON metadata for the struct
// [EmbeddingNewResponse]
type embeddingNewResponseJSON struct {
	Data        apijson.Field
	Model       apijson.Field
	Object      apijson.Field
	Usage       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *EmbeddingNewResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r embeddingNewResponseJSON) RawJSON() string {
	return r.raw
}

// Represents an embedding vector returned by embedding endpoint.
type EmbeddingNewResponseData struct {
	// The embedding vector, which is a list of floats. The length of vector depends on
	// the model as listed in the [embedding guide](/docs/guides/embeddings).
	Embedding EmbeddingNewResponseDataEmbeddingUnion `json:"embedding,required"`
	// The index of the embedding in the list of embeddings.
	Index int64 `json:"index,required"`
	// The object type, which is always "embedding".
	Object EmbeddingNewResponseDataObject `json:"object,required"`
	JSON   embeddingNewResponseDataJSON   `json:"-"`
}

// embeddingNewResponseDataJSON contains the JSON metadata for the struct
// [EmbeddingNewResponseData]
type embeddingNewResponseDataJSON struct {
	Embedding   apijson.Field
	Index       apijson.Field
	Object      apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *EmbeddingNewResponseData) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r embeddingNewResponseDataJSON) RawJSON() string {
	return r.raw
}

// The embedding vector, which is a list of floats. The length of vector depends on
// the model as listed in the [embedding guide](/docs/guides/embeddings).
//
// Union satisfied by [EmbeddingNewResponseDataEmbeddingArray] or
// [shared.UnionString].
type EmbeddingNewResponseDataEmbeddingUnion interface {
	ImplementsEmbeddingNewResponseDataEmbeddingUnion()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*EmbeddingNewResponseDataEmbeddingUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(EmbeddingNewResponseDataEmbeddingArray{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.String,
			Type:       reflect.TypeOf(shared.UnionString("")),
		},
	)
}

type EmbeddingNewResponseDataEmbeddingArray []float64

func (r EmbeddingNewResponseDataEmbeddingArray) ImplementsEmbeddingNewResponseDataEmbeddingUnion() {}

// The object type, which is always "embedding".
type EmbeddingNewResponseDataObject string

const (
	EmbeddingNewResponseDataObjectEmbedding EmbeddingNewResponseDataObject = "embedding"
)

func (r EmbeddingNewResponseDataObject) IsKnown() bool {
	switch r {
	case EmbeddingNewResponseDataObjectEmbedding:
		return true
	}
	return false
}

// The object type, which is always "list".
type EmbeddingNewResponseObject string

const (
	EmbeddingNewResponseObjectList EmbeddingNewResponseObject = "list"
)

func (r EmbeddingNewResponseObject) IsKnown() bool {
	switch r {
	case EmbeddingNewResponseObjectList:
		return true
	}
	return false
}

// The usage information for the request.
type EmbeddingNewResponseUsage struct {
	// The number of tokens used by the prompt.
	PromptTokens int64 `json:"prompt_tokens,required"`
	// The total number of tokens used by the request.
	TotalTokens int64                         `json:"total_tokens,required"`
	JSON        embeddingNewResponseUsageJSON `json:"-"`
}

// embeddingNewResponseUsageJSON contains the JSON metadata for the struct
// [EmbeddingNewResponseUsage]
type embeddingNewResponseUsageJSON struct {
	PromptTokens apijson.Field
	TotalTokens  apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *EmbeddingNewResponseUsage) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r embeddingNewResponseUsageJSON) RawJSON() string {
	return r.raw
}

type EmbeddingNewParams struct {
	// Input text to embed, encoded as a string or array of tokens. To embed multiple
	// inputs in a single request, pass an array of strings or array of token arrays.
	// The input must not exceed the max input tokens for the model, cannot be an empty
	// string, and any array must be 2048 dimensions or less.
	Input param.Field[EmbeddingNewParamsInputUnion] `json:"input,required"`
	// ID of the model to use.
	Model param.Field[EmbeddingNewParamsModel] `json:"model,required"`
	// The format to return the embeddings in. Can only be `float` or `base64`.
	EncodingFormat param.Field[EmbeddingNewParamsEncodingFormat] `json:"encoding_format"`
	// A unique identifier representing your end-user, which can help us monitor and
	// detect abuse.
	User param.Field[string] `json:"user"`
}

func (r EmbeddingNewParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Input text to embed, encoded as a string or array of tokens. To embed multiple
// inputs in a single request, pass an array of strings or array of token arrays.
// The input must not exceed the max input tokens for the model, cannot be an empty
// string, and any array must be 2048 dimensions or less.
//
// Satisfied by [shared.UnionString], [EmbeddingNewParamsInputArray].
type EmbeddingNewParamsInputUnion interface {
	ImplementsEmbeddingNewParamsInputUnion()
}

type EmbeddingNewParamsInputArray []string

func (r EmbeddingNewParamsInputArray) ImplementsEmbeddingNewParamsInputUnion() {}

type EmbeddingNewParamsModel string

const (
	EmbeddingNewParamsModelNomicEmbedTextV1_5 EmbeddingNewParamsModel = "nomic-embed-text-v1_5"
)

func (r EmbeddingNewParamsModel) IsKnown() bool {
	switch r {
	case EmbeddingNewParamsModelNomicEmbedTextV1_5:
		return true
	}
	return false
}

// The format to return the embeddings in. Can only be `float` or `base64`.
type EmbeddingNewParamsEncodingFormat string

const (
	EmbeddingNewParamsEncodingFormatFloat  EmbeddingNewParamsEncodingFormat = "float"
	EmbeddingNewParamsEncodingFormatBase64 EmbeddingNewParamsEncodingFormat = "base64"
)

func (r EmbeddingNewParamsEncodingFormat) IsKnown() bool {
	switch r {
	case EmbeddingNewParamsEncodingFormatFloat, EmbeddingNewParamsEncodingFormatBase64:
		return true
	}
	return false
}
