{{define "header"}}
// Code generated by groq-modeler DO NOT EDIT.
//
// Created at: {{ getCurrentDate }}
//
// groq-modeler Version 1.1.2
{{end}}

{{define "models"}}
{{template "header" .}}
package groq

type (
	// Model is a ai model accessible through the groq api.
	Model string

	// ChatModel is the type for chat models present on the groq api.
	ChatModel Model

	// ModerationModel is the type for moderation models present on the groq api.
	ModerationModel Model

	// AudioModel is the type for audio models present on the groq api.
	AudioModel Model
)

var (
	{{- range $model := .ChatModels }}
		// Model{{ $model.Name }} is an AI text chat model.
		//
		// It is created/provided by {{$model.OwnedBy}}.
		//	
		// It has {{$model.ContextWindow}} context window.
		//
		// It can be used with the following client methods:
		//	- ChatCompletion
		// 	- ChatCompletionStream
		// 	- ChatCompletionJSON
		Model{{ $model.Name }} ChatModel = "{{ $model.ID }}"
	{{- end }}

	{{- range $model := .AudioModels }}
		// Model{{ $model.Name }} is an AI audio transcription model.
		//
		// It is created/provided by {{$model.OwnedBy}}.
		//	
		// It has {{$model.ContextWindow}} context window.
		//
		// It can be used with the following client methods:
		//	- CreateTranscription
		// 	- CreateTranslation
		Model{{ $model.Name }} AudioModel = "{{ $model.ID }}"
	{{- end }}
	{{- range $model := .ModerationModels }}
		// Model{{ $model.Name }} is an AI moderation model.
		//
		// It is created/provided by {{$model.OwnedBy}}.
		//	
		// It has {{$model.ContextWindow}} context window.
		//
		// It can be used with the following client methods:
		//	- Moderate
		Model{{ $model.Name }} ModerationModel = "{{ $model.ID }}"
	{{- end }}
)
{{end}}

{{define "models_test"}}
{{template "header" .}}
package groq_test

import (
	"context"
	"os"
	"testing"
	"time"

	"github.com/conneroisu/groq-go"
	"github.com/conneroisu/groq-go/pkg/test"
	"github.com/stretchr/testify/assert"

	_ "embed"
)

//go:embed testdata/whisper.mp3
var whisperBytes []byte

{{- range $model := .ChatModels }}
// TestChatModels{{ $model.Name }} tests the {{ $model.Name }} model.
//
// It ensures that the model is supported by the groq-go library and the groq 
// API. // and the operations are working as expected for the specific model type.
func TestChatModels{{ $model.Name }}(t *testing.T) {
	if len(os.Getenv("UNIT")) < 1 {
		t.Skip("Skipping {{ $model.Name }} test")
	}
	a := assert.New(t)
	ctx := context.Background()
	apiKey, err := test.GetAPIKey("GROQ_KEY")
	a.NoError(err, "GetAPIKey error")
	client, err := groq.NewClient(apiKey)
	a.NoError(err, "NewClient error")
	response, err := client.ChatCompletion(ctx, groq.ChatCompletionRequest{
		Model: groq.Model{{ $model.Name }},
		Messages: []groq.ChatCompletionMessage{
			{
				Role:    groq.RoleUser,
				Content: "What is a proface display?",
			},
		},
		MaxTokens: 10,
		RetryDelay: time.Second * 2,
	})
	a.NoError(err, "ChatCompletionJSON error")
	if len(response.Choices[0].Message.Content) == 0 {
		t.Errorf("response.Choices[0].Message.Content is empty for model {{ $model.Name }} calling ChatCompletion")
	}
}
{{- end }}
{{end}}
