// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package groq

import (
	"context"
	"net/http"

	"github.com/conneroisu/groq-go/internal/apijson"
	"github.com/conneroisu/groq-go/internal/param"
	"github.com/conneroisu/groq-go/internal/requestconfig"
	"github.com/conneroisu/groq-go/option"
)

// ChatCompletionService contains methods and other services that help with
// interacting with the groq API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewChatCompletionService] method instead.
type ChatCompletionService struct {
	Options []option.RequestOption
}

// NewChatCompletionService generates a new service that applies the given options
// to each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewChatCompletionService(opts ...option.RequestOption) (r *ChatCompletionService) {
	r = &ChatCompletionService{}
	r.Options = opts
	return
}

// Creates a model response for the given chat conversation.
func (r *ChatCompletionService) New(ctx context.Context, body ChatCompletionNewParams, opts ...option.RequestOption) (res *ChatCompletionNewResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "openai/v1/chat/completions"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// Represents a chat completion response returned by model, based on the provided
// input.
type ChatCompletionNewResponse struct {
	// A unique identifier for the chat completion.
	ID string `json:"id,required"`
	// A list of chat completion choices. Can be more than one if `n` is greater
	// than 1.
	Choices []ChatCompletionNewResponseChoice `json:"choices,required"`
	// The Unix timestamp (in seconds) of when the chat completion was created.
	Created int64 `json:"created,required"`
	// The model used for the chat completion.
	Model string `json:"model,required"`
	// The object type, which is always `chat.completion`.
	Object ChatCompletionNewResponseObject `json:"object,required"`
	// This fingerprint represents the backend configuration that the model runs with.
	//
	// Can be used in conjunction with the `seed` request parameter to understand when
	// backend changes have been made that might impact determinism.
	SystemFingerprint string `json:"system_fingerprint"`
	// Usage statistics for the completion request.
	Usage ChatCompletionNewResponseUsage `json:"usage"`
	JSON  chatCompletionNewResponseJSON  `json:"-"`
}

// chatCompletionNewResponseJSON contains the JSON metadata for the struct
// [ChatCompletionNewResponse]
type chatCompletionNewResponseJSON struct {
	ID                apijson.Field
	Choices           apijson.Field
	Created           apijson.Field
	Model             apijson.Field
	Object            apijson.Field
	SystemFingerprint apijson.Field
	Usage             apijson.Field
	raw               string
	ExtraFields       map[string]apijson.Field
}

func (r *ChatCompletionNewResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r chatCompletionNewResponseJSON) RawJSON() string {
	return r.raw
}

type ChatCompletionNewResponseChoice struct {
	// The reason the model stopped generating tokens. This will be `stop` if the model
	// hit a natural stop point or a provided stop sequence, `length` if the maximum
	// number of tokens specified in the request was reached, `tool_calls` if the model
	// called a tool, or `function_call` (deprecated) if the model called a function.
	FinishReason ChatCompletionNewResponseChoicesFinishReason `json:"finish_reason,required"`
	// The index of the choice in the list of choices.
	Index int64 `json:"index,required"`
	// Log probability information for the choice.
	Logprobs ChatCompletionNewResponseChoicesLogprobs `json:"logprobs,required,nullable"`
	// A chat completion message generated by the model.
	Message ChatCompletionNewResponseChoicesMessage `json:"message,required"`
	JSON    chatCompletionNewResponseChoiceJSON     `json:"-"`
}

// chatCompletionNewResponseChoiceJSON contains the JSON metadata for the struct
// [ChatCompletionNewResponseChoice]
type chatCompletionNewResponseChoiceJSON struct {
	FinishReason apijson.Field
	Index        apijson.Field
	Logprobs     apijson.Field
	Message      apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *ChatCompletionNewResponseChoice) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r chatCompletionNewResponseChoiceJSON) RawJSON() string {
	return r.raw
}

// The reason the model stopped generating tokens. This will be `stop` if the model
// hit a natural stop point or a provided stop sequence, `length` if the maximum
// number of tokens specified in the request was reached, `tool_calls` if the model
// called a tool, or `function_call` (deprecated) if the model called a function.
type ChatCompletionNewResponseChoicesFinishReason string

const (
	ChatCompletionNewResponseChoicesFinishReasonStop         ChatCompletionNewResponseChoicesFinishReason = "stop"
	ChatCompletionNewResponseChoicesFinishReasonLength       ChatCompletionNewResponseChoicesFinishReason = "length"
	ChatCompletionNewResponseChoicesFinishReasonToolCalls    ChatCompletionNewResponseChoicesFinishReason = "tool_calls"
	ChatCompletionNewResponseChoicesFinishReasonFunctionCall ChatCompletionNewResponseChoicesFinishReason = "function_call"
)

func (r ChatCompletionNewResponseChoicesFinishReason) IsKnown() bool {
	switch r {
	case ChatCompletionNewResponseChoicesFinishReasonStop, ChatCompletionNewResponseChoicesFinishReasonLength, ChatCompletionNewResponseChoicesFinishReasonToolCalls, ChatCompletionNewResponseChoicesFinishReasonFunctionCall:
		return true
	}
	return false
}

// Log probability information for the choice.
type ChatCompletionNewResponseChoicesLogprobs struct {
	// A list of message content tokens with log probability information.
	Content []ChatCompletionNewResponseChoicesLogprobsContent `json:"content,required,nullable"`
	JSON    chatCompletionNewResponseChoicesLogprobsJSON      `json:"-"`
}

// chatCompletionNewResponseChoicesLogprobsJSON contains the JSON metadata for the
// struct [ChatCompletionNewResponseChoicesLogprobs]
type chatCompletionNewResponseChoicesLogprobsJSON struct {
	Content     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *ChatCompletionNewResponseChoicesLogprobs) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r chatCompletionNewResponseChoicesLogprobsJSON) RawJSON() string {
	return r.raw
}

type ChatCompletionNewResponseChoicesLogprobsContent struct {
	// The token.
	Token string `json:"token,required"`
	// A list of integers representing the UTF-8 bytes representation of the token.
	// Useful in instances where characters are represented by multiple tokens and
	// their byte representations must be combined to generate the correct text
	// representation. Can be `null` if there is no bytes representation for the token.
	Bytes []int64 `json:"bytes,required,nullable"`
	// The log probability of this token, if it is within the top 20 most likely
	// tokens. Otherwise, the value `-9999.0` is used to signify that the token is very
	// unlikely.
	Logprob float64 `json:"logprob,required"`
	// List of the most likely tokens and their log probability, at this token
	// position. In rare cases, there may be fewer than the number of requested
	// `top_logprobs` returned.
	TopLogprobs []ChatCompletionNewResponseChoicesLogprobsContentTopLogprob `json:"top_logprobs,required"`
	JSON        chatCompletionNewResponseChoicesLogprobsContentJSON         `json:"-"`
}

// chatCompletionNewResponseChoicesLogprobsContentJSON contains the JSON metadata
// for the struct [ChatCompletionNewResponseChoicesLogprobsContent]
type chatCompletionNewResponseChoicesLogprobsContentJSON struct {
	Token       apijson.Field
	Bytes       apijson.Field
	Logprob     apijson.Field
	TopLogprobs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *ChatCompletionNewResponseChoicesLogprobsContent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r chatCompletionNewResponseChoicesLogprobsContentJSON) RawJSON() string {
	return r.raw
}

type ChatCompletionNewResponseChoicesLogprobsContentTopLogprob struct {
	// The token.
	Token string `json:"token,required"`
	// A list of integers representing the UTF-8 bytes representation of the token.
	// Useful in instances where characters are represented by multiple tokens and
	// their byte representations must be combined to generate the correct text
	// representation. Can be `null` if there is no bytes representation for the token.
	Bytes []int64 `json:"bytes,required,nullable"`
	// The log probability of this token, if it is within the top 20 most likely
	// tokens. Otherwise, the value `-9999.0` is used to signify that the token is very
	// unlikely.
	Logprob float64                                                       `json:"logprob,required"`
	JSON    chatCompletionNewResponseChoicesLogprobsContentTopLogprobJSON `json:"-"`
}

// chatCompletionNewResponseChoicesLogprobsContentTopLogprobJSON contains the JSON
// metadata for the struct
// [ChatCompletionNewResponseChoicesLogprobsContentTopLogprob]
type chatCompletionNewResponseChoicesLogprobsContentTopLogprobJSON struct {
	Token       apijson.Field
	Bytes       apijson.Field
	Logprob     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *ChatCompletionNewResponseChoicesLogprobsContentTopLogprob) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r chatCompletionNewResponseChoicesLogprobsContentTopLogprobJSON) RawJSON() string {
	return r.raw
}

// A chat completion message generated by the model.
type ChatCompletionNewResponseChoicesMessage struct {
	// The contents of the message.
	Content string `json:"content,required,nullable"`
	// The role of the author of this message.
	Role ChatCompletionNewResponseChoicesMessageRole `json:"role,required"`
	// Deprecated and replaced by `tool_calls`. The name and arguments of a function
	// that should be called, as generated by the model.
	FunctionCall ChatCompletionNewResponseChoicesMessageFunctionCall `json:"function_call"`
	// The tool calls generated by the model, such as function calls.
	ToolCalls []ChatCompletionNewResponseChoicesMessageToolCall `json:"tool_calls"`
	JSON      chatCompletionNewResponseChoicesMessageJSON       `json:"-"`
}

// chatCompletionNewResponseChoicesMessageJSON contains the JSON metadata for the
// struct [ChatCompletionNewResponseChoicesMessage]
type chatCompletionNewResponseChoicesMessageJSON struct {
	Content      apijson.Field
	Role         apijson.Field
	FunctionCall apijson.Field
	ToolCalls    apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *ChatCompletionNewResponseChoicesMessage) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r chatCompletionNewResponseChoicesMessageJSON) RawJSON() string {
	return r.raw
}

// The role of the author of this message.
type ChatCompletionNewResponseChoicesMessageRole string

const (
	ChatCompletionNewResponseChoicesMessageRoleAssistant ChatCompletionNewResponseChoicesMessageRole = "assistant"
)

func (r ChatCompletionNewResponseChoicesMessageRole) IsKnown() bool {
	switch r {
	case ChatCompletionNewResponseChoicesMessageRoleAssistant:
		return true
	}
	return false
}

// Deprecated and replaced by `tool_calls`. The name and arguments of a function
// that should be called, as generated by the model.
type ChatCompletionNewResponseChoicesMessageFunctionCall struct {
	// The arguments to call the function with, as generated by the model in JSON
	// format. Note that the model does not always generate valid JSON, and may
	// hallucinate parameters not defined by your function schema. Validate the
	// arguments in your code before calling your function.
	Arguments string `json:"arguments,required"`
	// The name of the function to call.
	Name string                                                  `json:"name,required"`
	JSON chatCompletionNewResponseChoicesMessageFunctionCallJSON `json:"-"`
}

// chatCompletionNewResponseChoicesMessageFunctionCallJSON contains the JSON
// metadata for the struct [ChatCompletionNewResponseChoicesMessageFunctionCall]
type chatCompletionNewResponseChoicesMessageFunctionCallJSON struct {
	Arguments   apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *ChatCompletionNewResponseChoicesMessageFunctionCall) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r chatCompletionNewResponseChoicesMessageFunctionCallJSON) RawJSON() string {
	return r.raw
}

type ChatCompletionNewResponseChoicesMessageToolCall struct {
	// The ID of the tool call.
	ID string `json:"id,required"`
	// The function that the model called.
	Function ChatCompletionNewResponseChoicesMessageToolCallsFunction `json:"function,required"`
	// The type of the tool. Currently, only `function` is supported.
	Type ChatCompletionNewResponseChoicesMessageToolCallsType `json:"type,required"`
	JSON chatCompletionNewResponseChoicesMessageToolCallJSON  `json:"-"`
}

// chatCompletionNewResponseChoicesMessageToolCallJSON contains the JSON metadata
// for the struct [ChatCompletionNewResponseChoicesMessageToolCall]
type chatCompletionNewResponseChoicesMessageToolCallJSON struct {
	ID          apijson.Field
	Function    apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *ChatCompletionNewResponseChoicesMessageToolCall) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r chatCompletionNewResponseChoicesMessageToolCallJSON) RawJSON() string {
	return r.raw
}

// The function that the model called.
type ChatCompletionNewResponseChoicesMessageToolCallsFunction struct {
	// The arguments to call the function with, as generated by the model in JSON
	// format. Note that the model does not always generate valid JSON, and may
	// hallucinate parameters not defined by your function schema. Validate the
	// arguments in your code before calling your function.
	Arguments string `json:"arguments,required"`
	// The name of the function to call.
	Name string                                                       `json:"name,required"`
	JSON chatCompletionNewResponseChoicesMessageToolCallsFunctionJSON `json:"-"`
}

// chatCompletionNewResponseChoicesMessageToolCallsFunctionJSON contains the JSON
// metadata for the struct
// [ChatCompletionNewResponseChoicesMessageToolCallsFunction]
type chatCompletionNewResponseChoicesMessageToolCallsFunctionJSON struct {
	Arguments   apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *ChatCompletionNewResponseChoicesMessageToolCallsFunction) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r chatCompletionNewResponseChoicesMessageToolCallsFunctionJSON) RawJSON() string {
	return r.raw
}

// The type of the tool. Currently, only `function` is supported.
type ChatCompletionNewResponseChoicesMessageToolCallsType string

const (
	ChatCompletionNewResponseChoicesMessageToolCallsTypeFunction ChatCompletionNewResponseChoicesMessageToolCallsType = "function"
)

func (r ChatCompletionNewResponseChoicesMessageToolCallsType) IsKnown() bool {
	switch r {
	case ChatCompletionNewResponseChoicesMessageToolCallsTypeFunction:
		return true
	}
	return false
}

// The object type, which is always `chat.completion`.
type ChatCompletionNewResponseObject string

const (
	ChatCompletionNewResponseObjectChatCompletion ChatCompletionNewResponseObject = "chat.completion"
)

func (r ChatCompletionNewResponseObject) IsKnown() bool {
	switch r {
	case ChatCompletionNewResponseObjectChatCompletion:
		return true
	}
	return false
}

// Usage statistics for the completion request.
type ChatCompletionNewResponseUsage struct {
	// Number of tokens in the generated completion.
	CompletionTokens int64 `json:"completion_tokens,required"`
	// Number of tokens in the prompt.
	PromptTokens int64 `json:"prompt_tokens,required"`
	// Total number of tokens used in the request (prompt + completion).
	TotalTokens int64 `json:"total_tokens,required"`
	// Time spent generating tokens
	CompletionTime float64 `json:"completion_time"`
	// Time spent processing input tokens
	PromptTime float64 `json:"prompt_time"`
	// Time the requests was spent queued
	QueueTime float64 `json:"queue_time"`
	// completion time and prompt time combined
	TotalTime float64                            `json:"total_time"`
	JSON      chatCompletionNewResponseUsageJSON `json:"-"`
}

// chatCompletionNewResponseUsageJSON contains the JSON metadata for the struct
// [ChatCompletionNewResponseUsage]
type chatCompletionNewResponseUsageJSON struct {
	CompletionTokens apijson.Field
	PromptTokens     apijson.Field
	TotalTokens      apijson.Field
	CompletionTime   apijson.Field
	PromptTime       apijson.Field
	QueueTime        apijson.Field
	TotalTime        apijson.Field
	raw              string
	ExtraFields      map[string]apijson.Field
}

func (r *ChatCompletionNewResponseUsage) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r chatCompletionNewResponseUsageJSON) RawJSON() string {
	return r.raw
}

type ChatCompletionNewParams struct {
	// A list of messages comprising the conversation so far.
	Messages param.Field[[]ChatCompletionNewParamsMessageUnion] `json:"messages,required"`
	// ID of the model to use. For details on which models are compatible with the Chat
	// API, see available [models](/docs/models)
	Model param.Field[ChatCompletionNewParamsModel] `json:"model,required"`
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on their
	// existing frequency in the text so far, decreasing the model's likelihood to
	// repeat the same line verbatim.
	FrequencyPenalty param.Field[float64] `json:"frequency_penalty"`
	// Deprecated in favor of `tool_choice`.
	//
	// Controls which (if any) function is called by the model. `none` means the model
	// will not call a function and instead generates a message. `auto` means the model
	// can pick between generating a message or calling a function. Specifying a
	// particular function via `{"name": "my_function"}` forces the model to call that
	// function.
	//
	// `none` is the default when no functions are present. `auto` is the default if
	// functions are present.
	FunctionCall param.Field[ChatCompletionNewParamsFunctionCallUnion] `json:"function_call"`
	// Deprecated in favor of `tools`.
	//
	// A list of functions the model may generate JSON inputs for.
	Functions param.Field[[]ChatCompletionNewParamsFunction] `json:"functions"`
	// This is not yet supported by any of our models. Modify the likelihood of
	// specified tokens appearing in the completion.
	LogitBias param.Field[map[string]int64] `json:"logit_bias"`
	// This is not yet supported by any of our models. Whether to return log
	// probabilities of the output tokens or not. If true, returns the log
	// probabilities of each output token returned in the `content` of `message`.
	Logprobs param.Field[bool] `json:"logprobs"`
	// The maximum number of tokens that can be generated in the chat completion. The
	// total length of input tokens and generated tokens is limited by the model's
	// context length.
	MaxTokens param.Field[int64] `json:"max_tokens"`
	// How many chat completion choices to generate for each input message. Note that
	// the current moment, only n=1 is supported. Other values will result in a 400
	// response.
	N param.Field[int64] `json:"n"`
	// Whether to enable parallel function calling during tool use.
	ParallelToolCalls param.Field[bool] `json:"parallel_tool_calls"`
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on
	// whether they appear in the text so far, increasing the model's likelihood to
	// talk about new topics.
	PresencePenalty param.Field[float64] `json:"presence_penalty"`
	// An object specifying the format that the model must output.
	//
	// Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the
	// message the model generates is valid JSON.
	//
	// **Important:** when using JSON mode, you **must** also instruct the model to
	// produce JSON yourself via a system or user message.
	ResponseFormat param.Field[ChatCompletionNewParamsResponseFormat] `json:"response_format"`
	// If specified, our system will make a best effort to sample deterministically,
	// such that repeated requests with the same `seed` and parameters should return
	// the same result. Determinism is not guaranteed, and you should refer to the
	// `system_fingerprint` response parameter to monitor changes in the backend.
	Seed param.Field[int64] `json:"seed"`
	// Up to 4 sequences where the API will stop generating further tokens. The
	// returned text will not contain the stop sequence.
	Stop param.Field[ChatCompletionNewParamsStopUnion] `json:"stop"`
	// If set, partial message deltas will be sent. Tokens will be sent as data-only
	// [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
	// as they become available, with the stream terminated by a `data: [DONE]`
	// message. [Example code](/docs/text-chat#streaming-a-chat-completion).
	Stream param.Field[bool] `json:"stream"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will
	// make the output more random, while lower values like 0.2 will make it more
	// focused and deterministic. We generally recommend altering this or top_p but not
	// both
	Temperature param.Field[float64] `json:"temperature"`
	// Controls which (if any) tool is called by the model. `none` means the model will
	// not call any tool and instead generates a message. `auto` means the model can
	// pick between generating a message or calling one or more tools. `required` means
	// the model must call one or more tools. Specifying a particular tool via
	// `{"type": "function", "function": {"name": "my_function"}}` forces the model to
	// call that tool.
	//
	// `none` is the default when no tools are present. `auto` is the default if tools
	// are present.
	ToolChoice param.Field[ChatCompletionNewParamsToolChoiceUnion] `json:"tool_choice"`
	// A list of tools the model may call. Currently, only functions are supported as a
	// tool. Use this to provide a list of functions the model may generate JSON inputs
	// for. A max of 128 functions are supported.
	Tools param.Field[[]ChatCompletionNewParamsTool] `json:"tools"`
	// This is not yet supported by any of our models. An integer between 0 and 20
	// specifying the number of most likely tokens to return at each token position,
	// each with an associated log probability. `logprobs` must be set to `true` if
	// this parameter is used.
	TopLogprobs param.Field[int64] `json:"top_logprobs"`
	// An alternative to sampling with temperature, called nucleus sampling, where the
	// model considers the results of the tokens with top_p probability mass. So 0.1
	// means only the tokens comprising the top 10% probability mass are considered. We
	// generally recommend altering this or temperature but not both.
	TopP param.Field[float64] `json:"top_p"`
	// A unique identifier representing your end-user, which can help us monitor and
	// detect abuse.
	User param.Field[string] `json:"user"`
}

func (r ChatCompletionNewParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type ChatCompletionNewParamsMessage struct {
	Content param.Field[interface{}] `json:"content,required"`
	// An optional name for the participant. Provides the model information to
	// differentiate between participants of the same role.
	Name param.Field[string] `json:"name"`
	// The role of the messages author, in this case `system`.
	Role         param.Field[ChatCompletionNewParamsMessagesRole] `json:"role,required"`
	FunctionCall param.Field[interface{}]                         `json:"function_call,required"`
	ToolCalls    param.Field[interface{}]                         `json:"tool_calls,required"`
	// Tool call that this message is responding to.
	ToolCallID param.Field[string] `json:"tool_call_id"`
}

func (r ChatCompletionNewParamsMessage) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r ChatCompletionNewParamsMessage) implementsChatCompletionNewParamsMessageUnion() {}

// Satisfied by
// [ChatCompletionNewParamsMessagesChatCompletionRequestSystemMessage],
// [ChatCompletionNewParamsMessagesChatCompletionRequestUserMessage],
// [ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessage],
// [ChatCompletionNewParamsMessagesChatCompletionRequestToolMessage],
// [ChatCompletionNewParamsMessagesChatCompletionRequestFunctionMessage],
// [ChatCompletionNewParamsMessage].
type ChatCompletionNewParamsMessageUnion interface {
	implementsChatCompletionNewParamsMessageUnion()
}

type ChatCompletionNewParamsMessagesChatCompletionRequestSystemMessage struct {
	// The contents of the system message.
	Content param.Field[string] `json:"content,required"`
	// The role of the messages author, in this case `system`.
	Role param.Field[ChatCompletionNewParamsMessagesChatCompletionRequestSystemMessageRole] `json:"role,required"`
	// An optional name for the participant. Provides the model information to
	// differentiate between participants of the same role.
	Name param.Field[string] `json:"name"`
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestSystemMessage) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestSystemMessage) implementsChatCompletionNewParamsMessageUnion() {
}

// The role of the messages author, in this case `system`.
type ChatCompletionNewParamsMessagesChatCompletionRequestSystemMessageRole string

const (
	ChatCompletionNewParamsMessagesChatCompletionRequestSystemMessageRoleSystem ChatCompletionNewParamsMessagesChatCompletionRequestSystemMessageRole = "system"
)

func (r ChatCompletionNewParamsMessagesChatCompletionRequestSystemMessageRole) IsKnown() bool {
	switch r {
	case ChatCompletionNewParamsMessagesChatCompletionRequestSystemMessageRoleSystem:
		return true
	}
	return false
}

type ChatCompletionNewParamsMessagesChatCompletionRequestUserMessage struct {
	// The contents of the user message.
	Content param.Field[ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentUnion] `json:"content,required"`
	// The role of the messages author, in this case `user`.
	Role param.Field[ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageRole] `json:"role,required"`
	// An optional name for the participant. Provides the model information to
	// differentiate between participants of the same role.
	Name param.Field[string] `json:"name"`
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestUserMessage) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestUserMessage) implementsChatCompletionNewParamsMessageUnion() {
}

// The contents of the user message.
//
// Satisfied by [shared.UnionString],
// [ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentParts].
type ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentUnion interface {
	ImplementsChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentUnion()
}

type ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentParts []ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartUnion

func (r ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentParts) ImplementsChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentUnion() {
}

type ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPart struct {
	// The text content.
	Text param.Field[string] `json:"text"`
	// The type of the content part.
	Type     param.Field[ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsType] `json:"type,required"`
	ImageURL param.Field[interface{}]                                                                                   `json:"image_url,required"`
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPart) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPart) implementsChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartUnion() {
}

// Satisfied by
// [ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartText],
// [ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImage],
// [ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPart].
type ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartUnion interface {
	implementsChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartUnion()
}

type ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartText struct {
	// The text content.
	Text param.Field[string] `json:"text,required"`
	// The type of the content part.
	Type param.Field[ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartTextType] `json:"type,required"`
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartText) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartText) implementsChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartUnion() {
}

// The type of the content part.
type ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartTextType string

const (
	ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartTextTypeText ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartTextType = "text"
)

func (r ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartTextType) IsKnown() bool {
	switch r {
	case ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartTextTypeText:
		return true
	}
	return false
}

type ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImage struct {
	ImageURL param.Field[ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageImageURL] `json:"image_url,required"`
	// The type of the content part.
	Type param.Field[ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageType] `json:"type,required"`
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImage) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImage) implementsChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartUnion() {
}

type ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageImageURL struct {
	// Either a URL of the image or the base64 encoded image data.
	URL param.Field[string] `json:"url,required" format:"uri"`
	// Specifies the detail level of the image.
	Detail param.Field[ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageImageURLDetail] `json:"detail"`
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageImageURL) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Specifies the detail level of the image.
type ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageImageURLDetail string

const (
	ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageImageURLDetailAuto ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageImageURLDetail = "auto"
	ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageImageURLDetailLow  ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageImageURLDetail = "low"
	ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageImageURLDetailHigh ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageImageURLDetail = "high"
)

func (r ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageImageURLDetail) IsKnown() bool {
	switch r {
	case ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageImageURLDetailAuto, ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageImageURLDetailLow, ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageImageURLDetailHigh:
		return true
	}
	return false
}

// The type of the content part.
type ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageType string

const (
	ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageTypeImageURL ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageType = "image_url"
)

func (r ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageType) IsKnown() bool {
	switch r {
	case ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsChatCompletionRequestMessageContentPartImageTypeImageURL:
		return true
	}
	return false
}

// The type of the content part.
type ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsType string

const (
	ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsTypeText     ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsType = "text"
	ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsTypeImageURL ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsType = "image_url"
)

func (r ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsType) IsKnown() bool {
	switch r {
	case ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsTypeText, ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageContentArrayOfContentPartsTypeImageURL:
		return true
	}
	return false
}

// The role of the messages author, in this case `user`.
type ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageRole string

const (
	ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageRoleUser ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageRole = "user"
)

func (r ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageRole) IsKnown() bool {
	switch r {
	case ChatCompletionNewParamsMessagesChatCompletionRequestUserMessageRoleUser:
		return true
	}
	return false
}

type ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessage struct {
	// The role of the messages author, in this case `assistant`.
	Role param.Field[ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageRole] `json:"role,required"`
	// The contents of the assistant message. Required unless `tool_calls` or
	// `function_call` is specified.
	Content param.Field[string] `json:"content"`
	// Deprecated and replaced by `tool_calls`. The name and arguments of a function
	// that should be called, as generated by the model.
	FunctionCall param.Field[ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageFunctionCall] `json:"function_call"`
	// An optional name for the participant. Provides the model information to
	// differentiate between participants of the same role.
	Name param.Field[string] `json:"name"`
	// The tool calls generated by the model, such as function calls.
	ToolCalls param.Field[[]ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageToolCall] `json:"tool_calls"`
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessage) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessage) implementsChatCompletionNewParamsMessageUnion() {
}

// The role of the messages author, in this case `assistant`.
type ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageRole string

const (
	ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageRoleAssistant ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageRole = "assistant"
)

func (r ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageRole) IsKnown() bool {
	switch r {
	case ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageRoleAssistant:
		return true
	}
	return false
}

// Deprecated and replaced by `tool_calls`. The name and arguments of a function
// that should be called, as generated by the model.
type ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageFunctionCall struct {
	// The arguments to call the function with, as generated by the model in JSON
	// format. Note that the model does not always generate valid JSON, and may
	// hallucinate parameters not defined by your function schema. Validate the
	// arguments in your code before calling your function.
	Arguments param.Field[string] `json:"arguments"`
	// The name of the function to call.
	Name param.Field[string] `json:"name"`
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageFunctionCall) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageToolCall struct {
	// The ID of the tool call.
	ID param.Field[string] `json:"id,required"`
	// The function that the model called.
	Function param.Field[ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageToolCallsFunction] `json:"function,required"`
	// The type of the tool. Currently, only `function` is supported.
	Type param.Field[ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageToolCallsType] `json:"type,required"`
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageToolCall) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// The function that the model called.
type ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageToolCallsFunction struct {
	// The arguments to call the function with, as generated by the model in JSON
	// format. Note that the model does not always generate valid JSON, and may
	// hallucinate parameters not defined by your function schema. Validate the
	// arguments in your code before calling your function.
	Arguments param.Field[string] `json:"arguments,required"`
	// The name of the function to call.
	Name param.Field[string] `json:"name,required"`
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageToolCallsFunction) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// The type of the tool. Currently, only `function` is supported.
type ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageToolCallsType string

const (
	ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageToolCallsTypeFunction ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageToolCallsType = "function"
)

func (r ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageToolCallsType) IsKnown() bool {
	switch r {
	case ChatCompletionNewParamsMessagesChatCompletionRequestAssistantMessageToolCallsTypeFunction:
		return true
	}
	return false
}

type ChatCompletionNewParamsMessagesChatCompletionRequestToolMessage struct {
	// The contents of the tool message.
	Content param.Field[string] `json:"content,required"`
	// The role of the messages author, in this case `tool`.
	Role param.Field[ChatCompletionNewParamsMessagesChatCompletionRequestToolMessageRole] `json:"role,required"`
	// Tool call that this message is responding to.
	ToolCallID param.Field[string] `json:"tool_call_id,required"`
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestToolMessage) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestToolMessage) implementsChatCompletionNewParamsMessageUnion() {
}

// The role of the messages author, in this case `tool`.
type ChatCompletionNewParamsMessagesChatCompletionRequestToolMessageRole string

const (
	ChatCompletionNewParamsMessagesChatCompletionRequestToolMessageRoleTool ChatCompletionNewParamsMessagesChatCompletionRequestToolMessageRole = "tool"
)

func (r ChatCompletionNewParamsMessagesChatCompletionRequestToolMessageRole) IsKnown() bool {
	switch r {
	case ChatCompletionNewParamsMessagesChatCompletionRequestToolMessageRoleTool:
		return true
	}
	return false
}

type ChatCompletionNewParamsMessagesChatCompletionRequestFunctionMessage struct {
	// The contents of the function message.
	Content param.Field[string] `json:"content,required"`
	// The name of the function to call.
	Name param.Field[string] `json:"name,required"`
	// The role of the messages author, in this case `function`.
	Role param.Field[ChatCompletionNewParamsMessagesChatCompletionRequestFunctionMessageRole] `json:"role,required"`
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestFunctionMessage) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r ChatCompletionNewParamsMessagesChatCompletionRequestFunctionMessage) implementsChatCompletionNewParamsMessageUnion() {
}

// The role of the messages author, in this case `function`.
type ChatCompletionNewParamsMessagesChatCompletionRequestFunctionMessageRole string

const (
	ChatCompletionNewParamsMessagesChatCompletionRequestFunctionMessageRoleFunction ChatCompletionNewParamsMessagesChatCompletionRequestFunctionMessageRole = "function"
)

func (r ChatCompletionNewParamsMessagesChatCompletionRequestFunctionMessageRole) IsKnown() bool {
	switch r {
	case ChatCompletionNewParamsMessagesChatCompletionRequestFunctionMessageRoleFunction:
		return true
	}
	return false
}

// The role of the messages author, in this case `system`.
type ChatCompletionNewParamsMessagesRole string

const (
	ChatCompletionNewParamsMessagesRoleSystem    ChatCompletionNewParamsMessagesRole = "system"
	ChatCompletionNewParamsMessagesRoleUser      ChatCompletionNewParamsMessagesRole = "user"
	ChatCompletionNewParamsMessagesRoleAssistant ChatCompletionNewParamsMessagesRole = "assistant"
	ChatCompletionNewParamsMessagesRoleTool      ChatCompletionNewParamsMessagesRole = "tool"
	ChatCompletionNewParamsMessagesRoleFunction  ChatCompletionNewParamsMessagesRole = "function"
)

func (r ChatCompletionNewParamsMessagesRole) IsKnown() bool {
	switch r {
	case ChatCompletionNewParamsMessagesRoleSystem, ChatCompletionNewParamsMessagesRoleUser, ChatCompletionNewParamsMessagesRoleAssistant, ChatCompletionNewParamsMessagesRoleTool, ChatCompletionNewParamsMessagesRoleFunction:
		return true
	}
	return false
}

type ChatCompletionNewParamsModel string

const (
	ChatCompletionNewParamsModelGemma7bIt        ChatCompletionNewParamsModel = "gemma-7b-it"
	ChatCompletionNewParamsModelLlama3_70b8192   ChatCompletionNewParamsModel = "llama3-70b-8192"
	ChatCompletionNewParamsModelLlama3_8b8192    ChatCompletionNewParamsModel = "llama3-8b-8192"
	ChatCompletionNewParamsModelMixtral8x7b32768 ChatCompletionNewParamsModel = "mixtral-8x7b-32768"
)

func (r ChatCompletionNewParamsModel) IsKnown() bool {
	switch r {
	case ChatCompletionNewParamsModelGemma7bIt, ChatCompletionNewParamsModelLlama3_70b8192, ChatCompletionNewParamsModelLlama3_8b8192, ChatCompletionNewParamsModelMixtral8x7b32768:
		return true
	}
	return false
}

// Deprecated in favor of `tool_choice`.
//
// Controls which (if any) function is called by the model. `none` means the model
// will not call a function and instead generates a message. `auto` means the model
// can pick between generating a message or calling a function. Specifying a
// particular function via `{"name": "my_function"}` forces the model to call that
// function.
//
// `none` is the default when no functions are present. `auto` is the default if
// functions are present.
//
// Satisfied by [ChatCompletionNewParamsFunctionCallString],
// [ChatCompletionNewParamsFunctionCallChatCompletionFunctionCallOption].
type ChatCompletionNewParamsFunctionCallUnion interface {
	implementsChatCompletionNewParamsFunctionCallUnion()
}

// `none` means the model will not call a function and instead generates a message.
// `auto` means the model can pick between generating a message or calling a
// function.
type ChatCompletionNewParamsFunctionCallString string

const (
	ChatCompletionNewParamsFunctionCallStringNone     ChatCompletionNewParamsFunctionCallString = "none"
	ChatCompletionNewParamsFunctionCallStringAuto     ChatCompletionNewParamsFunctionCallString = "auto"
	ChatCompletionNewParamsFunctionCallStringRequired ChatCompletionNewParamsFunctionCallString = "required"
)

func (r ChatCompletionNewParamsFunctionCallString) IsKnown() bool {
	switch r {
	case ChatCompletionNewParamsFunctionCallStringNone, ChatCompletionNewParamsFunctionCallStringAuto, ChatCompletionNewParamsFunctionCallStringRequired:
		return true
	}
	return false
}

func (r ChatCompletionNewParamsFunctionCallString) implementsChatCompletionNewParamsFunctionCallUnion() {
}

// Specifying a particular function via `{"name": "my_function"}` forces the model
// to call that function.
type ChatCompletionNewParamsFunctionCallChatCompletionFunctionCallOption struct {
	// The name of the function to call.
	Name param.Field[string] `json:"name,required"`
}

func (r ChatCompletionNewParamsFunctionCallChatCompletionFunctionCallOption) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r ChatCompletionNewParamsFunctionCallChatCompletionFunctionCallOption) implementsChatCompletionNewParamsFunctionCallUnion() {
}

type ChatCompletionNewParamsFunction struct {
	// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain
	// underscores and dashes, with a maximum length of 64.
	Name param.Field[string] `json:"name,required"`
	// A description of what the function does, used by the model to choose when and
	// how to call the function.
	Description param.Field[string] `json:"description"`
	// The parameters the functions accepts, described as a JSON Schema object. See the
	// docs on [tool use](/docs/tool-use) for examples, and the
	// [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for
	// documentation about the format.
	//
	// Omitting `parameters` defines a function with an empty parameter list.
	Parameters param.Field[map[string]interface{}] `json:"parameters"`
}

func (r ChatCompletionNewParamsFunction) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// An object specifying the format that the model must output.
//
// Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the
// message the model generates is valid JSON.
//
// **Important:** when using JSON mode, you **must** also instruct the model to
// produce JSON yourself via a system or user message.
type ChatCompletionNewParamsResponseFormat struct {
	// Must be one of `text` or `json_object`.
	Type param.Field[ChatCompletionNewParamsResponseFormatType] `json:"type"`
}

func (r ChatCompletionNewParamsResponseFormat) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Must be one of `text` or `json_object`.
type ChatCompletionNewParamsResponseFormatType string

const (
	ChatCompletionNewParamsResponseFormatTypeText       ChatCompletionNewParamsResponseFormatType = "text"
	ChatCompletionNewParamsResponseFormatTypeJsonObject ChatCompletionNewParamsResponseFormatType = "json_object"
)

func (r ChatCompletionNewParamsResponseFormatType) IsKnown() bool {
	switch r {
	case ChatCompletionNewParamsResponseFormatTypeText, ChatCompletionNewParamsResponseFormatTypeJsonObject:
		return true
	}
	return false
}

// Up to 4 sequences where the API will stop generating further tokens. The
// returned text will not contain the stop sequence.
//
// Satisfied by [shared.UnionString], [ChatCompletionNewParamsStopArray].
type ChatCompletionNewParamsStopUnion interface {
	ImplementsChatCompletionNewParamsStopUnion()
}

type ChatCompletionNewParamsStopArray []string

func (r ChatCompletionNewParamsStopArray) ImplementsChatCompletionNewParamsStopUnion() {}

// Controls which (if any) tool is called by the model. `none` means the model will
// not call any tool and instead generates a message. `auto` means the model can
// pick between generating a message or calling one or more tools. `required` means
// the model must call one or more tools. Specifying a particular tool via
// `{"type": "function", "function": {"name": "my_function"}}` forces the model to
// call that tool.
//
// `none` is the default when no tools are present. `auto` is the default if tools
// are present.
//
// Satisfied by [ChatCompletionNewParamsToolChoiceString],
// [ChatCompletionNewParamsToolChoiceChatCompletionNamedToolChoice].
type ChatCompletionNewParamsToolChoiceUnion interface {
	implementsChatCompletionNewParamsToolChoiceUnion()
}

// `none` means the model will not call any tool and instead generates a message.
// `auto` means the model can pick between generating a message or calling one or
// more tools.
type ChatCompletionNewParamsToolChoiceString string

const (
	ChatCompletionNewParamsToolChoiceStringNone     ChatCompletionNewParamsToolChoiceString = "none"
	ChatCompletionNewParamsToolChoiceStringAuto     ChatCompletionNewParamsToolChoiceString = "auto"
	ChatCompletionNewParamsToolChoiceStringRequired ChatCompletionNewParamsToolChoiceString = "required"
)

func (r ChatCompletionNewParamsToolChoiceString) IsKnown() bool {
	switch r {
	case ChatCompletionNewParamsToolChoiceStringNone, ChatCompletionNewParamsToolChoiceStringAuto, ChatCompletionNewParamsToolChoiceStringRequired:
		return true
	}
	return false
}

func (r ChatCompletionNewParamsToolChoiceString) implementsChatCompletionNewParamsToolChoiceUnion() {}

// Specifies a tool the model should use. Use to force the model to call a specific
// function.
type ChatCompletionNewParamsToolChoiceChatCompletionNamedToolChoice struct {
	Function param.Field[ChatCompletionNewParamsToolChoiceChatCompletionNamedToolChoiceFunction] `json:"function,required"`
	// The type of the tool. Currently, only `function` is supported.
	Type param.Field[ChatCompletionNewParamsToolChoiceChatCompletionNamedToolChoiceType] `json:"type,required"`
}

func (r ChatCompletionNewParamsToolChoiceChatCompletionNamedToolChoice) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r ChatCompletionNewParamsToolChoiceChatCompletionNamedToolChoice) implementsChatCompletionNewParamsToolChoiceUnion() {
}

type ChatCompletionNewParamsToolChoiceChatCompletionNamedToolChoiceFunction struct {
	// The name of the function to call.
	Name param.Field[string] `json:"name,required"`
}

func (r ChatCompletionNewParamsToolChoiceChatCompletionNamedToolChoiceFunction) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// The type of the tool. Currently, only `function` is supported.
type ChatCompletionNewParamsToolChoiceChatCompletionNamedToolChoiceType string

const (
	ChatCompletionNewParamsToolChoiceChatCompletionNamedToolChoiceTypeFunction ChatCompletionNewParamsToolChoiceChatCompletionNamedToolChoiceType = "function"
)

func (r ChatCompletionNewParamsToolChoiceChatCompletionNamedToolChoiceType) IsKnown() bool {
	switch r {
	case ChatCompletionNewParamsToolChoiceChatCompletionNamedToolChoiceTypeFunction:
		return true
	}
	return false
}

type ChatCompletionNewParamsTool struct {
	Function param.Field[ChatCompletionNewParamsToolsFunction] `json:"function,required"`
	// The type of the tool. Currently, only `function` is supported.
	Type param.Field[ChatCompletionNewParamsToolsType] `json:"type,required"`
}

func (r ChatCompletionNewParamsTool) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type ChatCompletionNewParamsToolsFunction struct {
	// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain
	// underscores and dashes, with a maximum length of 64.
	Name param.Field[string] `json:"name,required"`
	// A description of what the function does, used by the model to choose when and
	// how to call the function.
	Description param.Field[string] `json:"description"`
	// The parameters the functions accepts, described as a JSON Schema object. See the
	// docs on [tool use](/docs/tool-use) for examples, and the
	// [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for
	// documentation about the format.
	//
	// Omitting `parameters` defines a function with an empty parameter list.
	Parameters param.Field[map[string]interface{}] `json:"parameters"`
}

func (r ChatCompletionNewParamsToolsFunction) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// The type of the tool. Currently, only `function` is supported.
type ChatCompletionNewParamsToolsType string

const (
	ChatCompletionNewParamsToolsTypeFunction ChatCompletionNewParamsToolsType = "function"
)

func (r ChatCompletionNewParamsToolsType) IsKnown() bool {
	switch r {
	case ChatCompletionNewParamsToolsTypeFunction:
		return true
	}
	return false
}
